version: "3.8"

services:
  # PosgreSQL database
  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    networks:
      - local
    environment:
      POSTGRES_PASSWORD: stub
      POSTGRES_USER: stub
      POSTGRES_DB: stub
    volumes:
      - "pg_data:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stub -d stub"]
      interval: "10s"
      timeout: "5s"
      retries: 5
      start_period: "5s"

  # Redis server
  redis:
    image: eqalpha/keydb
    restart: unless-stopped
    networks:
      - local
    command: [keydb-server, --save, "60", "1"]
    healthcheck:
      test: ["CMD-SHELL", "keydb-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: "5s"
    volumes:
      - "redis_data:/data"

  # App
  app:
    image: ghcr.io/snazzah/stub
    env_file: .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - caddy
      - local
    labels:
      caddy_1: lio.to
      caddy_1.reverse_proxy: "{{upstreams 3001}}"
      caddy_2: admin.lio.to
      caddy_2.reverse_proxy: "{{upstreams 3000}}"
      com.centurylinklabs.watchtower.enable: true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 -O- http://localhost:3000/api/health",
        ]
      interval: "10s"
      timeout: "5s"
      retries: 5
      start_period: "5s"

networks:
  local:
    name: local
  caddy:
    external: true

volumes:
  pg_data:
  redis_data:
